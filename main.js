/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => AutoWorkspacePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  desktopWorkspaceName: "",
  mobileWorkspaceName: "",
  desktopEnabled: true,
  mobileEnabled: true
};
var AutoWorkspacePlugin = class extends import_obsidian.Plugin {
  /**
   * This is the entry point of the plugin. It's designed to be as fast as possible.
   */
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new AutoWorkspaceSettingTab(this.app, this));
    this.app.workspace.onLayoutReady(this.loadWorkspaceOnStartup.bind(this));
    console.log("Auto Workspace Loader plugin loaded.");
  }
  onunload() {
    console.log("Auto Workspace Loader plugin unloaded.");
  }
  /**
   * Loads settings, handling migration from older versions and ensuring
   * all setting properties exist.
   */
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  /**
   * This is the core logic, which runs only after Obsidian is fully loaded.
   * Its operations do not affect startup time.
   */
  async loadWorkspaceOnStartup() {
    const isMobile = import_obsidian.Platform.isMobile;
    const shouldLoad = isMobile ? this.settings.mobileEnabled : this.settings.desktopEnabled;
    const workspaceToLoad = isMobile ? this.settings.mobileWorkspaceName : this.settings.desktopWorkspaceName;
    if (!shouldLoad || !workspaceToLoad || workspaceToLoad.trim() === "") {
      return;
    }
    console.log(`Auto Workspace: Attempting to load workspace "${workspaceToLoad}" on ${isMobile ? "mobile" : "desktop"}`);
    try {
      const workspacesPlugin = this.app.internalPlugins.plugins.workspaces;
      const workspaceInstance = workspacesPlugin == null ? void 0 : workspacesPlugin.instance;
      if (workspaceInstance && workspacesPlugin.enabled) {
        await workspaceInstance.loadWorkspace(workspaceToLoad);
        new import_obsidian.Notice(`Workspace "${workspaceToLoad}" loaded.`);
      } else if (workspacesPlugin && !workspacesPlugin.enabled) {
        new import_obsidian.Notice('Auto Workspace Loader: The core "Workspaces" plugin must be enabled.', 5e3);
      }
    } catch (error) {
      console.error("Auto Workspace Plugin - Error loading workspace:", error);
      new import_obsidian.Notice(`Error loading workspace: "${workspaceToLoad}". Please check if it still exists.`, 7e3);
    }
  }
};
var AutoWorkspaceSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Auto Workspace Loader Settings" });
    new import_obsidian.Setting(containerEl).setName("Enable for Desktop").setDesc("If on, automatically load the specified desktop workspace.").addToggle((toggle) => toggle.setValue(this.plugin.settings.desktopEnabled).onChange(async (value) => {
      this.plugin.settings.desktopEnabled = value;
      await this.plugin.saveSettings();
      this.display();
    }));
    new import_obsidian.Setting(containerEl).setName("Desktop workspace").setDesc("The workspace to load on desktop devices.").addText((text) => {
      text.setPlaceholder("e.g., Main Work").setValue(this.plugin.settings.desktopWorkspaceName).setDisabled(!this.plugin.settings.desktopEnabled).onChange(async (value) => {
        this.plugin.settings.desktopWorkspaceName = value.trim();
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Enable for Mobile").setDesc("If on, automatically load the specified mobile workspace.").addToggle((toggle) => toggle.setValue(this.plugin.settings.mobileEnabled).onChange(async (value) => {
      this.plugin.settings.mobileEnabled = value;
      await this.plugin.saveSettings();
      this.display();
    }));
    new import_obsidian.Setting(containerEl).setName("Mobile workspace").setDesc("The workspace to load on mobile devices.").addText((text) => {
      text.setPlaceholder("e.g., Quick Notes").setValue(this.plugin.settings.mobileWorkspaceName).setDisabled(!this.plugin.settings.mobileEnabled).onChange(async (value) => {
        this.plugin.settings.mobileWorkspaceName = value.trim();
        await this.plugin.saveSettings();
      });
    });
  }
};
